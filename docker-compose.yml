services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka-status-agent
    restart: on-failure
    ports:
      - 9092:9092
    environment:
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_NUM_PARTITIONS=3
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - application_network
    volumes:
      - kafka_data:/bitnami/kafka

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper-status-agent
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - application_network

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui-status-agent
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "8080:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=DataWayBR
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - application_network

  mongo:
    image: mongo:latest
    container_name: mongo-status-agent
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 7890380
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - application_network

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express-status-agent
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: 7890380
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admingeral
    ports:
      - "8081:8081"
    networks:
      - application_network
    depends_on:
      - mongo
      
  producer:
    container_name: producer-status-agent
    build:
      context: .
      dockerfile: ./producer/Dockerfile
    depends_on:
      - kafka
    env_file:
      - .env
    networks:
      - application_network

  consumer:
    container_name: consumer-status-agent
    build:
      context: .
      dockerfile: ./consumer/Dockerfile
    depends_on:
      - kafka
      - mongo
    env_file:
      - .env
    networks:
      - application_network

volumes:
  mongo_data:
  kafka_data:

networks:
  application_network:
    driver: bridge